@page "/diet"
@inherits DietListBase
@attribute [CustomAuthorize(RoleInfo.Dietician)]

<link href="/css/dietician/dist/adddiet.css" rel="stylesheet" />

<div class="diet-page">
    <div class="section overflow-auto">
        @if (PageStateService.IsLoading)
        {
            <Loading />
        }
        else
        {
            <EditForm Model="DietCreateDto" OnValidSubmit="DietCreateValidSubmit" id="disableEnterKeyForm">
                <FluentValidationValidator Validator="Validator"></FluentValidationValidator>
                @if (!ErrorMessage.IsEmpty())
                {
                    <div class="row text-danger mb-2 pl-1">
                        @(ErrorMessage.Cast<MarkupString>())
                    </div>
                }
                <div class="form-row">
                    <label for="Name">Ad</label>
                    <InputText @bind-Value="DietCreateDto.Name" type="text" class="form-control" placeholder="Ad" id="Name" />
                    <ValidationMessage For="() => DietCreateDto.Name"></ValidationMessage>
                </div>
                <div class="form-row">
                    <label for="Description">Açıklama</label>
                    <InputTextArea @bind-Value="DietCreateDto.Description" type="text" class="form-control" placeholder="Açıklama" id="Description" />
                    <ValidationMessage For="() => DietCreateDto.Description"></ValidationMessage>
                </div>

                <div class="form-row">
                    <label for="SearchKey">Ara</label>
                    <input @bind="SearchKey" @bind:event="oninput" @onkeyup="Search" type="text" class="form-control" placeholder="Ara" id="SearchKey">
                </div>

                <div class="table-responsive w-100 h-100">
                    <div class="row d-flex justify-content-center mx-0 my-3">
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modal"><i class="fas fa-plus"></i></button>
                    </div>
                    <ValidationMessage For="() => DietFoods"></ValidationMessage>
                    @if (!ListValidMessage.IsEmpty())
                    {
                        <div class="row text-danger mb-2 pl-1 mx-0">
                            @(ListValidMessage.Cast<MarkupString>())
                        </div>
                    }


                    <table class="table position-relative table-light table-striped table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Durum</th>
                                <th>Name</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (SearchedDietFoods.IsNotNull())
                            {
                                @foreach (var item in SearchedDietFoods)
                                {
                                    <tr>
                                        <td class="text-center">
                                            <input @bind="item.IsSelected" type="checkbox" />
                                        </td>
                                        <td>@item.Name</td>
                                        <td class="text-truncate">@item.Description</td>
                                    </tr>
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Durum</th>
                                <th>Name</th>
                                <th>Description</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="form-row justify-content-center mt-3">
                    <input class="btn btn-success" type="submit" value="Diyet Olustur" />
                </div>

            </EditForm>

        }

    </div>

</div>

<Modal Title="Yemek Ekle" IsForm="true" CloseTitle="İptal" TaskTitle="Ekle">
    <Body>
        @if (ModalLoading)
        {
            <Loading />
        }
        else
        {
            <EditForm id="form" Model="FoodCreateDto" OnValidSubmit="ModalValidSubmit">
                <FluentValidationValidator Validator="ModalValidator" />
                @if (!ModalErrorMessage.IsEmpty())
                {
                    <div class="row text-danger mb-2 pl-1">
                        @((MarkupString)ModalErrorMessage)
                    </div>
                }
                <div class="form-row">
                    <label for="Name">Ad</label>
                    <InputText @bind-Value="FoodCreateDto.Name" type="text" class="form-control" placeholder="Ad" id="Name" />
                    <ValidationMessage For="() => FoodCreateDto.Name"></ValidationMessage>
                </div>
                <div class="form-row">
                    <label for="Description">Açıklama</label>
                    <InputTextArea @bind-Value="FoodCreateDto.Description" type="text" class="form-control" placeholder="Açıklama" id="Description" />
                    <ValidationMessage For="() => FoodCreateDto.Description"></ValidationMessage>
                </div>
            </EditForm>
        }

    </Body>
</Modal>
