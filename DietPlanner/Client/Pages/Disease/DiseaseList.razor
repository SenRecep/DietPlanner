@page "/disease/list"
@attribute [CustomAuthorize(RoleInfo.Dietician)]
@inject IPageStateService pageStateService
@inject IDieticianHttpService dieticianService
@inject HttpInterceptorService interceptorService
@inject IJSRuntime jsRuntime
@inject IValidator<DiseaseCreateDto> validator
@implements IDisposable

<link href="/css/dietician/dist/adddiet.css" rel="stylesheet" />
<div class="diet-page">
    <div class="section overflow-auto">
        @if (pageStateService.IsLoading)
        {
            <Loading />
        }
        else
        {
            <div class="table-responsive w-100 h-100">
                <div class="row d-flex justify-content-center mx-0 mb-3">
                    <button class="btn btn-primary" data-toggle="modal" data-target="#modal"><i class="fas fa-plus"></i></button>
                </div>
                <table class="table position-relative table-light table-striped table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Hastalık Adı</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Diseases.IsNotNull())
                        {
                            @foreach (var item in Diseases)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                </tr>
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Hastalık Adı</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        }

    </div>

</div>

<Modal Title="Hastalık Ekle" IsForm="true" CloseTitle="İptal" TaskTitle="Ekle">
    <Body>
        @if (ModalLoading)
        {
            <Loading />
        }
        else
        {
            <EditForm id="form" Model="DiseaseCreateDto" OnValidSubmit="ValidSubmit">
                <FluentValidationValidator Validator="validator" />
                @if (!ErrorMessage.IsEmpty())
                {
                    <div class="row text-danger mb-2 pl-1">
                        @((MarkupString)ErrorMessage)
                    </div>
                }
                <div class="form-row">
                    <label for="Name">Hastalık adı</label>
                    <InputText @bind-Value="DiseaseCreateDto.Name" type="text" class="form-control" placeholder="Hastalık Adı" id="Name" />
                    <ValidationMessage For="() => DiseaseCreateDto.Name"></ValidationMessage>
                </div>
            </EditForm>
        }

    </Body>
</Modal>

@code {
    public IEnumerable<DiseaseDto> Diseases { get; set; }

    public DiseaseCreateDto DiseaseCreateDto { get; set; } = new();

    public string ErrorMessage { get; set; }

    public bool ModalLoading { get; set; }

    protected async Task InitAsync()
    {
        pageStateService.IsLoading = true;
        interceptorService.RegisterEvent();
        var response = await dieticianService.GetAllDieasesAsync();
        if (response.IsSuccessful)
            Diseases = response.Data;
        pageStateService.IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        pageStateService.Title = "Hastalıklar";
        pageStateService.NavbarType = NavbarType.Dietician;
        await InitAsync();
    }


    public async Task ValidSubmit()
    {
        ModalLoading = true;
        interceptorService.RegisterEvent();
        var response = await dieticianService.CreateDiseaseAsync(DiseaseCreateDto);
        if (!response.IsSuccessful)
            ErrorMessage = response.ErrorData.GetErrors("<br/>");
        else
        {
            ErrorMessage = "";
            DiseaseCreateDto = new();
        }
        ModalLoading = false;
        await jsRuntime.InvokeVoidAsync("closeModal", "modal");
        await InitAsync();
    }

    public void Dispose()
    {
        interceptorService.DisposeEvent();
    }
}